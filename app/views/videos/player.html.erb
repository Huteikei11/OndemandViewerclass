<div class="video-player-container">
  <div class="video-section">
    <% if @video.video_file.attached? %>
      <div class="question-indicator" id="question-indicator" style="display: none;">問題あり！</div>
      
      <!-- デバッグ情報パネル -->
      <div class="debug-panel" id="debug-panel" style="display: none;">
        <div class="debug-header">
          目線追跡デバッグ情報
          <button class="btn btn-sm btn-outline-light ms-2" id="toggle-camera-preview">カメラ</button>
        </div>
        
        <!-- タブナビゲーション -->
        <div class="debug-tabs">
          <button class="debug-tab-btn active" onclick="showDebugTab('info')">基本情報</button>
          <button class="debug-tab-btn" onclick="showDebugTab('factors')">スコア要因</button>
        </div>
        
        <!-- 基本情報タブ -->
        <div id="debug-tab-info" class="debug-tab-content">
          <div>顔検出: <span id="face-detected">-</span></div>
          <div>目線方向X: <span id="gaze-x">-</span></div>
          <div>目線方向Y: <span id="gaze-y">-</span></div>
          <div>目線方向: <span id="gaze-direction">-</span></div>
          <div>正面向き割合: <span id="front-facing">-</span>%</div>
          <div>最後の動き: <span id="last-movement">-</span>秒前</div>
          <div>メモ入力回数: <span id="note-inputs">0</span></div>
          
          <!-- カメラプレビュー -->
          <div class="camera-preview" id="camera-preview" style="display: none;">
            <video id="debug-camera" width="160" height="120" autoplay muted></video>
            <canvas id="debug-canvas" width="160" height="120"></canvas>
          </div>
          
          <!-- 集中度変動ログ -->
          <div class="concentration-log">
            <div class="log-header">集中度変動ログ</div>
            <div class="log-content" id="concentration-log"></div>
          </div>
        </div>
        
        <!-- スコア要因タブ -->
        <div id="debug-tab-factors" class="debug-tab-content" style="display: none;">
          <div class="factors-header">スコア変動イベント説明</div>
          <div id="score-factors" class="score-factors">
            <div class="factor-category">
              <h7 class="category-title">📹 カメラ関連</h7>
              <div class="factor-item neutral">
                <div class="factor-header">顔未検出 (-2点)</div>
                <div class="factor-detail">カメラに顔が映っていない場合に減点されます</div>
              </div>
            </div>
            
            <div class="factor-category">
              <h7 class="category-title">👀 目線・注視</h7>
              <div class="factor-item positive">
                <div class="factor-header">集中注視 (+0.5点)</div>
                <div class="factor-detail">画面中央を注視している場合に加点されます</div>
              </div>
              <div class="factor-item positive">
                <div class="factor-header">問題確認 (+5点)</div>
                <div class="factor-detail">問題表示後に右側（問題エリア）を注視した場合に加点されます</div>
              </div>
              <div class="factor-item negative">
                <div class="factor-header">目線停止 (-20点まで)</div>
                <div class="factor-detail">10秒以上目線の動きがない場合に減点されます</div>
              </div>
            </div>
            
            <div class="factor-category">
              <h7 class="category-title">⚡ 反応速度</h7>
              <div class="factor-item negative">
                <div class="factor-header">回答遅延 (-15点まで)</div>
                <div class="factor-detail">問題表示から30秒以上経過して回答した場合に減点されます</div>
              </div>
              <div class="factor-item positive">
                <div class="factor-header">素早い回答 (+3点)</div>
                <div class="factor-detail">問題表示から5秒以内に回答した場合に加点されます</div>
              </div>
            </div>
            
            <div class="factor-category">
              <h7 class="category-title">📝 メモ活動</h7>
              <div class="factor-item positive">
                <div class="factor-header">メモ入力 (+3点/回)</div>
                <div class="factor-detail">新しいメモを入力するたびに加点されます</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <video id="video-player" controls>
        <source src="<%= url_for(@video.video_file) %>" type="<%= @video.video_file.content_type %>">
        Your browser does not support the video tag.
      </video>
    <% else %>
      <div class="no-video">
        <p>動画が利用できません</p>
      </div>
    <% end %>
    
    <div class="video-info">
      <h1><%= @video.title %></h1>
      <div class="video-actions">
        <% if @video.pdf_file.attached? %>
          <a href="<%= url_for(@video.pdf_file) %>" target="_blank" class="btn btn-primary">講義資料を開く</a>
        <% end %>
        <%= link_to '戻る', root_path, class: "btn btn-secondary" %>
        
        <!-- 集中度ゲージ -->
        <div class="concentration-gauge" id="concentration-gauge">
          <div class="gauge-header">
            <span>集中度</span>
            <button class="btn btn-sm btn-outline-light" id="toggle-debug-info">デバッグ</button>
          </div>
          <div class="gauge-bar">
            <div class="gauge-level gauge-green" id="gauge-green"></div>
            <div class="gauge-level gauge-yellow" id="gauge-yellow"></div>
            <div class="gauge-level gauge-orange" id="gauge-orange"></div>
            <div class="gauge-level gauge-red" id="gauge-red"></div>
          </div>
          <div class="gauge-score" id="gauge-score">100%</div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="side-panel">
    <div class="question-section" id="question-section">
      <div class="section-header">
        <h3>問題</h3>
      </div>
      
      <div class="question-content" id="question-container">
        <div class="waiting-message" id="waiting-message">
          <p>動画を再生すると、問題が表示されます</p>
          <% if @questions.any? %>
            <p><strong>設定されている問題数: <%= @questions.count %></strong></p>
          <% else %>
            <p><strong>この動画には問題がありません</strong></p>
          <% end %>
        </div>
        
        <div class="question-display" id="question-display" style="display: none;">
          <div class="question-text" id="question-text"></div>
          
          <div class="question-form" id="true-false-form" style="display: none;">
            <div class="options">
              <label class="option-label">
                <input type="radio" name="tf-answer" value="○"> ○
              </label>
              <label class="option-label">
                <input type="radio" name="tf-answer" value="×"> ×
              </label>
            </div>
            <button class="btn btn-primary" id="tf-submit">回答する</button>
          </div>
          
          <div class="question-form" id="multiple-choice-form" style="display: none;">
            <div class="options" id="mc-options"></div>
            <button class="btn btn-primary" id="mc-submit">回答する</button>
          </div>
          
          <div class="question-form" id="free-response-form" style="display: none;">
            <textarea id="free-response-answer" rows="3" class="form-control" placeholder="回答を入力してください"></textarea>
            <button class="btn btn-primary mt-2" id="fr-submit">回答する</button>
          </div>
          
          <div class="result-message" id="result-message" style="display: none;"></div>
        </div>
      </div>
    </div>
    
    <div class="notes-section">
      <div class="section-header">
        <h3>メモ</h3>
        <button class="btn btn-sm btn-primary" id="save-note-btn">保存</button>
      </div>
      
      <div class="notes-content">
        <textarea id="note-textarea" rows="10" class="form-control" placeholder="ここにメモを入力できます..."></textarea>
        
        <div class="saved-notes" id="saved-notes">
          <% if @notes.any? %>
            <h4>保存したメモ</h4>
            <ul class="notes-list">
              <% @notes.each do |note| %>
                <li class="note-item">
                  <div class="note-time"><%= format_time_position(note.time_position) %></div>
                  <div class="note-text"><%= note.content %></div>
                </li>
              <% end %>
            </ul>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  body {
    margin: 0;
    padding: 0;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    background-color: #f8f9fa;
  }
  
  .video-player-container {
    display: flex;
    min-height: 100vh;
    background-color: #000;
  }
  
  .video-section {
    flex: 3;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    position: relative;
  }
  
  .question-indicator {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(255, 193, 7, 0.9);
    color: #000;
    padding: 5px 10px;
    border-radius: 4px;
    font-weight: bold;
    z-index: 101;
    display: none;
    animation: fadeIn 0.5s;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  /* 集中度ゲージ */
  .concentration-gauge {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 10px;
    border-radius: 8px;
    margin-left: 10px;
    min-width: 100px;
  }
  
  .gauge-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
    font-size: 12px;
    font-weight: bold;
    width: 100%;
  }
  
  .gauge-bar {
    display: flex;
    flex-direction: column;
    height: 60px;
    width: 20px;
    border: 1px solid #555;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 5px;
  }
  
  .gauge-level {
    flex: 1;
    transition: opacity 0.3s ease;
    opacity: 0.3;
  }
  
  .gauge-level.active {
    opacity: 1;
  }
  
  .gauge-green { background-color: #28a745; }
  .gauge-yellow { background-color: #ffc107; }
  .gauge-orange { background-color: #fd7e14; }
  .gauge-red { background-color: #dc3545; }
  
  .gauge-score {
    text-align: center;
    font-size: 11px;
    font-weight: bold;
  }
  
  /* デバッグパネル */
  .debug-panel {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(0, 0, 0, 0.95);
    color: white;
    padding: 10px;
    border-radius: 8px;
    z-index: 99;
    max-width: 350px;
  }
  
  .debug-tabs {
    display: flex;
    margin-bottom: 10px;
    border-bottom: 1px solid #444;
  }
  
  .debug-tab-btn {
    background: none;
    border: none;
    color: #ccc;
    padding: 8px 12px;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    transition: all 0.3s ease;
  }
  
  .debug-tab-btn.active {
    color: white;
    border-bottom-color: #007bff;
  }
  
  .debug-tab-btn:hover {
    color: white;
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .debug-tab-content {
    animation: fadeIn 0.3s ease;
  }
  
  .score-factors {
    max-height: 200px;
    overflow-y: auto;
    font-size: 12px;
  }
  
  .factor-item {
    background-color: rgba(255, 255, 255, 0.1);
    margin: 5px 0;
    padding: 8px;
    border-radius: 4px;
    border-left: 3px solid #007bff;
  }
  
  .factor-item.positive {
    border-left-color: #28a745;
  }
  
  .factor-item.negative {
    border-left-color: #dc3545;
  }
  
  .factor-item.neutral {
    border-left-color: #6c757d;
  }
  
  .factor-header {
    font-weight: bold;
    margin-bottom: 3px;
  }
  
  .factor-detail {
    font-size: 11px;
    color: #ccc;
  }
  
  .factor-category {
    margin-bottom: 15px;
  }
  
  .category-title {
    font-size: 13px;
    font-weight: bold;
    color: #fff;
    margin-bottom: 8px;
    display: block;
    border-bottom: 1px solid #444;
    padding-bottom: 3px;
  }
  
  .factors-header {
    font-weight: bold;
    margin-bottom: 8px;
    border-bottom: 1px solid #555;
    padding-bottom: 4px;
  }
  
  .debug-header {
    font-weight: bold;
    margin-bottom: 8px;
    border-bottom: 1px solid #555;
    padding-bottom: 4px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .debug-content div {
    margin-bottom: 3px;
  }
  
  .camera-preview {
    margin-top: 10px;
    border-top: 1px solid #555;
    padding-top: 10px;
  }
  
  .camera-preview video,
  .camera-preview canvas {
    border: 1px solid #555;
    border-radius: 4px;
    margin-bottom: 5px;
  }
  
  .concentration-log {
    margin-top: 10px;
    border-top: 1px solid #555;
    padding-top: 10px;
  }
  
  .log-header {
    font-weight: bold;
    margin-bottom: 5px;
  }
  
  .log-content {
    max-height: 150px;
    overflow-y: auto;
    font-size: 10px;
    line-height: 1.2;
  }
  
  .log-entry {
    margin-bottom: 2px;
    padding: 2px 4px;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .log-entry:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }
  
  .log-entry.positive {
    background-color: rgba(40, 167, 69, 0.3);
  }
  
  .log-entry.negative {
    background-color: rgba(220, 53, 69, 0.3);
  }
  
  .log-entry.neutral {
    background-color: rgba(108, 117, 125, 0.3);
  }
  
  .log-main {
    font-weight: bold;
  }
  
  .log-detail {
    margin-top: 3px;
    padding-top: 3px;
    border-top: 1px solid rgba(255, 255, 255, 0.2);
    font-size: 9px;
    line-height: 1.3;
    color: rgba(255, 255, 255, 0.8);
  }
  
  #video-player {
    width: 100%;
    max-height: calc(100vh - 100px);
  }
  
  .video-info {
    padding: 15px;
    background-color: #111;
    color: #fff;
  }
  
  .video-info h1 {
    font-size: 20px;
    margin: 0 0 10px 0;
  }
  
  .video-actions {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    gap: 10px;
  }
  
  .side-panel {
    flex: 2;
    display: flex;
    flex-direction: column;
    background-color: #f8f9fa;
    border-left: 1px solid #dee2e6;
    overflow: hidden;
    max-width: 450px;
  }
  
  .question-section {
    flex: 1;
    display: flex;
    flex-direction: column;
    border-bottom: 1px solid #dee2e6;
    overflow: hidden;
  }
  
  .notes-section {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
  
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 15px;
    background-color: #e9ecef;
    border-bottom: 1px solid #dee2e6;
  }
  
  .section-header h3 {
    margin: 0;
    font-size: 18px;
  }
  
  .question-content, .notes-content {
    flex: 1;
    padding: 15px;
    overflow-y: auto;
  }
  
  .waiting-message {
    text-align: center;
    padding: 50px 20px;
    color: #6c757d;
  }
  
  .question-display {
    background-color: #fff;
    border-radius: 5px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .question-text {
    font-size: 18px;
    margin-bottom: 20px;
    line-height: 1.5;
  }
  
  .question-timestamp {
    font-size: 14px;
    color: #6c757d;
    margin-bottom: 8px;
    font-weight: bold;
  }
  
  .options {
    margin-bottom: 15px;
  }
  
  .option-label {
    display: block;
    margin-bottom: 10px;
    padding: 10px;
    background-color: #f0f0f0;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .option-label:hover {
    background-color: #e0e0e0;
  }
  
  .option-label input {
    margin-right: 10px;
  }
  
  .result-message {
    margin-top: 20px;
    padding: 15px;
    border-radius: 4px;
  }
  
  .result-message.correct {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }
  
  .result-message.incorrect {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
  
  #note-textarea {
    resize: none;
    border: 1px solid #ced4da;
    border-radius: 4px;
    width: 100%;
  }
  
  .saved-notes {
    margin-top: 20px;
  }
  
  .notes-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .note-item {
    background-color: #fff;
    border-radius: 4px;
    padding: 10px 15px;
    margin-bottom: 10px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .note-time {
    font-size: 12px;
    color: #6c757d;
    margin-bottom: 5px;
  }
  
  .note-text {
    white-space: pre-wrap;
  }
  
  .no-video {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 400px;
    color: #fff;
    background-color: #343a40;
  }
  
  .form-control {
    display: block;
    width: 100%;
    padding: .375rem .75rem;
    font-size: 1rem;
    line-height: 1.5;
    color: #495057;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #ced4da;
    border-radius: .25rem;
    transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
  }
  
  .btn {
    display: inline-block;
    font-weight: 400;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    user-select: none;
    border: 1px solid transparent;
    padding: .375rem .75rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: .25rem;
    transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    cursor: pointer;
  }
  
  .btn-sm {
    padding: .25rem .5rem;
    font-size: .875rem;
    line-height: 1.5;
    border-radius: .2rem;
  }
  
  .btn-primary {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
  }
  
  .btn-secondary {
    color: #fff;
    background-color: #6c757d;
    border-color: #6c757d;
  }
  
  .mt-2 {
    margin-top: .5rem;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const videoPlayer = document.getElementById('video-player');
  
  // グローバルエラーハンドリングを追加
  window.addEventListener('error', function(event) {
    console.error('Caught global error:', event.error);
  });
  
  // 集中度管理クラス
  class ConcentrationTracker {
    constructor() {
      this.score = 100;
      this.faceDetected = false;
      this.gazeX = 0;
      this.gazeY = 0;
      this.frontFacingRatio = 100;
      this.lastMovementTime = Date.now();
      this.noteInputs = 0;
      this.lastNoteCount = 0;
      this.responseStartTime = null;
      this.questionDisplayTime = null;
      
      this.initializeCamera();
      this.initializeGauge();
      this.initializeDebugPanel();
      this.startTracking();
      
      // グローバル関数としてタブ切り替えを登録
      window.showDebugTab = this.showDebugTab.bind(this);
    }
    
    async initializeCamera() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ 
          video: { width: 320, height: 240 } 
        });
        
        // 隠しvideo要素を作成してカメラ映像を表示
        this.cameraVideo = document.createElement('video');
        this.cameraVideo.srcObject = stream;
        this.cameraVideo.autoplay = true;
        this.cameraVideo.style.display = 'none';
        document.body.appendChild(this.cameraVideo);
        
        // Canvas要素を作成して顔検出用に使用
        this.canvas = document.createElement('canvas');
        this.canvas.width = 320;
        this.canvas.height = 240;
        this.ctx = this.canvas.getContext('2d');
        
        console.log('カメラ初期化完了');
      } catch (error) {
        console.error('カメラアクセスエラー:', error);
      }
    }
    
    initializeGauge() {
      this.gaugeElements = {
        green: document.getElementById('gauge-green'),
        yellow: document.getElementById('gauge-yellow'),
        orange: document.getElementById('gauge-orange'),
        red: document.getElementById('gauge-red'),
        score: document.getElementById('gauge-score')
      };
    }
    
    initializeDebugPanel() {
      const toggleButton = document.getElementById('toggle-debug-info');
      const debugPanel = document.getElementById('debug-panel');
      
      toggleButton.addEventListener('click', () => {
        debugPanel.style.display = debugPanel.style.display === 'none' ? 'block' : 'none';
      });
      
      // カメラプレビュー機能
      const toggleCameraButton = document.getElementById('toggle-camera-preview');
      const cameraPreview = document.getElementById('camera-preview');
      const debugCamera = document.getElementById('debug-camera');
      const debugCanvas = document.getElementById('debug-canvas');
      
      toggleCameraButton.addEventListener('click', () => {
        if (cameraPreview.style.display === 'none') {
          cameraPreview.style.display = 'block';
          // カメラ映像をデバッグ用videoに表示
          if (this.cameraVideo && this.cameraVideo.srcObject) {
            debugCamera.srcObject = this.cameraVideo.srcObject;
          }
        } else {
          cameraPreview.style.display = 'none';
        }
      });
      
      this.debugElements = {
        faceDetected: document.getElementById('face-detected'),
        gazeX: document.getElementById('gaze-x'),
        gazeY: document.getElementById('gaze-y'),
        gazeDirection: document.getElementById('gaze-direction'),
        frontFacing: document.getElementById('front-facing'),
        lastMovement: document.getElementById('last-movement'),
        noteInputs: document.getElementById('note-inputs')
      };
      
      // ログ機能の初期化
      this.logElement = document.getElementById('concentration-log');
      this.logs = [];
    }
    
    startTracking() {
      setInterval(() => {
        this.updateFaceTracking();
        this.calculateConcentration();
        this.updateGauge();
        this.updateDebugInfo();
      }, 1000); // 1秒ごとに更新
    }
    
    updateFaceTracking() {
      if (!this.cameraVideo || !this.canvas) return;
      
      try {
        // カメラ映像をcanvasに描画
        this.ctx.drawImage(this.cameraVideo, 0, 0, 320, 240);
        const imageData = this.ctx.getImageData(0, 0, 320, 240);
        
        // 簡易的な顔検出（実際の実装では顔検出ライブラリを使用）
        // 90%の確率で顔が検出される
        this.faceDetected = Math.random() > 0.1;
        
        if (this.faceDetected) {
          // より現実的な目線方向計算（正面中心の動き）
          const time = Date.now() / 1000;
          this.gazeX = Math.sin(time * 0.5) * 30 + Math.random() * 10 - 5; // -35 to 35
          this.gazeY = Math.cos(time * 0.3) * 20 + Math.random() * 10 - 5; // -25 to 25
          
          // 正面向きかどうかの判定
          const isFrontFacing = Math.abs(this.gazeX) < 20 && Math.abs(this.gazeY) < 20;
          this.frontFacingRatio = isFrontFacing ? Math.min(100, this.frontFacingRatio + 2) : Math.max(60, this.frontFacingRatio - 1);
          
          // 動きがあった場合は記録
          if (Math.abs(this.gazeX) > 10 || Math.abs(this.gazeY) > 10) {
            this.lastMovementTime = Date.now();
          }
        }
        
        // デバッグCanvasに描画
        this.updateDebugCanvas();
        
      } catch (error) {
        console.error('顔追跡エラー:', error);
      }
    }
    
    updateDebugCanvas() {
      const debugCanvas = document.getElementById('debug-canvas');
      if (!debugCanvas) return;
      
      const debugCtx = debugCanvas.getContext('2d');
      debugCtx.clearRect(0, 0, 160, 120);
      
      if (this.faceDetected) {
        // 顔検出時は緑の枠を描画
        debugCtx.strokeStyle = '#28a745';
        debugCtx.lineWidth = 2;
        debugCtx.strokeRect(40, 30, 80, 60);
        
        // 目線方向を矢印で表示
        const centerX = 80;
        const centerY = 60;
        const gazeEndX = centerX + (this.gazeX / 50) * 30;
        const gazeEndY = centerY + (this.gazeY / 50) * 20;
        
        debugCtx.strokeStyle = '#ffc107';
        debugCtx.lineWidth = 3;
        debugCtx.beginPath();
        debugCtx.moveTo(centerX, centerY);
        debugCtx.lineTo(gazeEndX, gazeEndY);
        debugCtx.stroke();
        
        // 矢印の先端
        debugCtx.fillStyle = '#ffc107';
        debugCtx.beginPath();
        debugCtx.arc(gazeEndX, gazeEndY, 3, 0, 2 * Math.PI);
        debugCtx.fill();
      } else {
        // 顔未検出時は赤い×印を描画
        debugCtx.strokeStyle = '#dc3545';
        debugCtx.lineWidth = 3;
        debugCtx.beginPath();
        debugCtx.moveTo(60, 40);
        debugCtx.lineTo(100, 80);
        debugCtx.moveTo(100, 40);
        debugCtx.lineTo(60, 80);
        debugCtx.stroke();
      }
    }
    
    detectFace(imageData) {
      // 簡易的な顔検出（明度ベース）
      // 実際の実装では顔検出ライブラリを使用
      const data = imageData.data;
      let brightness = 0;
      for (let i = 0; i < data.length; i += 4) {
        brightness += (data[i] + data[i + 1] + data[i + 2]) / 3;
      }
      const avgBrightness = brightness / (data.length / 4);
      return avgBrightness > 50; // 明度が50以上なら顔があると判定
    }
    
    calculateConcentration() {
      const oldScore = this.score;
      let newScore = this.score; // 現在のスコアから開始
      const reasons = [];
      
      // 顔が検出されない場合は減点
      if (!this.faceDetected) {
        const penalty = 2;
        newScore -= penalty;
        reasons.push({ 
          text: '顔未検出', 
          change: -penalty, 
          type: 'negative',
          category: 'カメラ',
          detail: 'カメラに顔が映っていません'
        });
      } else {
        // 正面向きの評価（加点は一時停止）
        // if (this.frontFacingRatio > 80) {
        //   const bonus = 1;
        //   newScore += bonus;
        //   reasons.push({ 
        //     text: '正面注視', 
        //     change: bonus, 
        //     type: 'positive',
        //     category: '姿勢',
        //     detail: `正面を向いています (正面率:${this.frontFacingRatio.toFixed(1)}%)`
        //   });
        // }
        
        // 目線方向による評価（目線をそらすだけでは減点しない）
        if (Math.abs(this.gazeX) < 15 && Math.abs(this.gazeY) < 15) {
          const bonus = 0.5;
          newScore += bonus;
          reasons.push({ 
            text: '集中注視', 
            change: bonus, 
            type: 'positive',
            category: '目線',
            detail: '画面中央を注視しています'
          });
        }
        // 目線をそらすこと自体は減点対象から除外
        
        // 問題表示後の目線の動き（右側への注視を評価）
        if (this.questionDisplayTime && !this.responseStartTime) {
          const timeFromQuestion = (Date.now() - this.questionDisplayTime) / 1000;
          if (timeFromQuestion < 10) { // 問題表示から10秒以内
            if (this.gazeX > 15) { // 右側を見ている
              const gazeBonus = 5;
              newScore += gazeBonus;
              reasons.push({ 
                text: '問題確認', 
                change: gazeBonus, 
                type: 'positive',
                category: '目線',
                detail: '問題表示後に右側（問題エリア）を注視しています'
              });
            }
          }
        }
        
        // 一定時間動きがない場合は減点
        const timeSinceMovement = (Date.now() - this.lastMovementTime) / 1000;
        if (timeSinceMovement > 10) {
          const penalty = Math.min(20, timeSinceMovement - 10);
          newScore -= penalty;
          reasons.push({ 
            text: `目線停止`, 
            change: -penalty, 
            type: 'negative',
            category: '目線',
            detail: `${timeSinceMovement.toFixed(1)}秒間目線の動きがありません`
          });
        }
        
        // 出題から回答までの時間が長い場合は減点
        if (this.questionDisplayTime && this.responseStartTime) {
          const responseTime = (this.responseStartTime - this.questionDisplayTime) / 1000;
          if (responseTime > 30) {
            const penalty = Math.min(15, responseTime - 30);
            newScore -= penalty;
            reasons.push({ 
              text: `回答遅延`, 
              change: -penalty, 
              type: 'negative',
              category: '反応',
              detail: `問題表示から回答まで${responseTime.toFixed(1)}秒かかりました`
            });
          } else if (responseTime < 5) {
            const bonus = 3;
            newScore += bonus;
            reasons.push({ 
              text: `素早い回答`, 
              change: bonus, 
              type: 'positive',
              category: '反応',
              detail: `問題表示から${responseTime.toFixed(1)}秒で回答しました`
            });
          }
        }
        
      }
      
      // メモ入力があった場合は加点（前回チェック時からの増分のみ）
      if (this.noteInputs > this.lastNoteCount) {
        const newNotes = this.noteInputs - this.lastNoteCount;
        const noteBonus = newNotes * 3;
        newScore += noteBonus;
        reasons.push({ 
          text: `メモ入力`, 
          change: noteBonus, 
          type: 'positive',
          category: 'メモ',
          detail: `${newNotes}回のメモ入力がありました`
        });
        this.lastNoteCount = this.noteInputs;
      }
      
      // スコアを0-100の範囲に制限
      this.score = Math.max(0, Math.min(100, newScore));
      
      // ログに記録（スコアが変化した場合、または理由がある場合）
      if (Math.abs(this.score - oldScore) > 0.1 || reasons.length > 0) {
        this.addLog(reasons, oldScore, this.score);
      }
    }
    
    addLog(reasons, oldScore, newScore) {
      const timestamp = new Date().toLocaleTimeString();
      const change = newScore - oldScore;
      
      // メインのログテキスト
      let logText = `[${timestamp}] ${oldScore.toFixed(0)} → ${newScore.toFixed(0)} (${change > 0 ? '+' : ''}${change.toFixed(0)})`;
      
      // 詳細な原因情報
      let detailText = '';
      if (reasons.length > 0) {
        const categoryGroups = {};
        reasons.forEach(r => {
          if (!categoryGroups[r.category]) {
            categoryGroups[r.category] = [];
          }
          categoryGroups[r.category].push(r);
        });
        
        const categoryTexts = Object.keys(categoryGroups).map(category => {
          const items = categoryGroups[category];
          const categoryChange = items.reduce((sum, item) => sum + item.change, 0);
          const itemTexts = items.map(item => 
            `${item.text}(${item.change > 0 ? '+' : ''}${item.change.toFixed(0)})`
          ).join(', ');
          
          return `【${category}】${itemTexts}`;
        });
        
        logText += ': ' + categoryTexts.join(' | ');
        
        // 詳細情報を別途作成
        detailText = reasons.map(r => `• ${r.detail}`).join('\n');
      }
      
      this.logs.unshift({
        text: logText,
        detail: detailText,
        reasons: reasons,
        type: change > 0 ? 'positive' : 'negative',
        timestamp: Date.now(),
        change: change
      });
      
      // ログは最新20件まで保持
      if (this.logs.length > 20) {
        this.logs = this.logs.slice(0, 20);
      }
      
      this.updateLogDisplay();
    }
    
    updateLogDisplay() {
      if (!this.logElement) return;
      
      this.logElement.innerHTML = this.logs.map((log, index) => {
        const expandId = `log-expand-${index}`;
        return `
          <div class="log-entry ${log.type}" onclick="this.querySelector('.log-detail').style.display = this.querySelector('.log-detail').style.display === 'none' ? 'block' : 'none';">
            <div class="log-main">${log.text}</div>
            ${log.detail ? `<div class="log-detail" style="display: none;">${log.detail}</div>` : ''}
          </div>
        `;
      }).join('');
    }
    
    showDebugTab(tabName) {
      // すべてのタブを非表示
      document.querySelectorAll('.debug-tab-content').forEach(tab => {
        tab.style.display = 'none';
      });
      
      // すべてのタブボタンをinactiveに
      document.querySelectorAll('.debug-tab-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      
      // 選択されたタブを表示
      const targetTab = document.getElementById(`debug-tab-${tabName}`);
      if (targetTab) {
        targetTab.style.display = 'block';
      }
      
      // 対応するボタンをactiveに
      event.target.classList.add('active');
    }
    
    updateGauge() {
      // すべてのレベルをリセット
      Object.values(this.gaugeElements).forEach(element => {
        if (element && element.classList) {
          element.classList.remove('active');
        }
      });
      
      // スコアに応じてゲージを更新
      if (this.score >= 75) {
        this.gaugeElements.green?.classList.add('active');
      } else if (this.score >= 50) {
        this.gaugeElements.yellow?.classList.add('active');
      } else if (this.score >= 25) {
        this.gaugeElements.orange?.classList.add('active');
      } else {
        this.gaugeElements.red?.classList.add('active');
      }
      
      if (this.gaugeElements.score) {
        this.gaugeElements.score.textContent = Math.round(this.score) + '%';
      }
    }
    
    updateDebugInfo() {
      if (this.debugElements.faceDetected) {
        this.debugElements.faceDetected.textContent = this.faceDetected ? '検出' : '未検出';
      }
      
      // 目線方向を分かりやすく表示
      if (this.debugElements.gazeX) {
        const horizontalDirection = this.gazeX > 15 ? '右' : 
                                   this.gazeX < -15 ? '左' : '中央';
        this.debugElements.gazeX.textContent = `${this.gazeX.toFixed(1)} (${horizontalDirection})`;
      }
      if (this.debugElements.gazeY) {
        const verticalDirection = this.gazeY > 15 ? '下' : 
                                 this.gazeY < -15 ? '上' : '中央';
        this.debugElements.gazeY.textContent = `${this.gazeY.toFixed(1)} (${verticalDirection})`;
      }
      
      // 総合的な目線方向を表示
      if (this.debugElements.gazeDirection) {
        let direction = '';
        
        // 垂直方向を先に判定
        if (this.gazeY < -15) direction += '上';
        else if (this.gazeY > 15) direction += '下';
        
        // 水平方向を後に判定
        if (this.gazeX < -15) direction += '左';
        else if (this.gazeX > 15) direction += '右';
        
        // 正面の場合
        if (!direction) direction = '正面';
        
        this.debugElements.gazeDirection.textContent = direction;
      }
      
      if (this.debugElements.frontFacing) {
        this.debugElements.frontFacing.textContent = this.frontFacingRatio.toFixed(1);
      }
      if (this.debugElements.lastMovement) {
        const timeSince = (Date.now() - this.lastMovementTime) / 1000;
        this.debugElements.lastMovement.textContent = timeSince.toFixed(1);
      }
      if (this.debugElements.noteInputs) {
        this.debugElements.noteInputs.textContent = this.noteInputs;
      }
    }
    
    onQuestionDisplayed() {
      this.questionDisplayTime = Date.now();
      this.responseStartTime = null;
      
      // 問題表示をログに記録
      const timestamp = new Date().toLocaleTimeString();
      this.logs.unshift({
        text: `[${timestamp}] 問題表示`,
        detail: '新しい問題が表示されました。目線の動きと反応時間の計測を開始します。',
        reasons: [{
          text: '問題表示',
          change: 0,
          type: 'neutral',
          category: 'イベント',
          detail: '新しい問題が表示されました。目線の動きと反応時間の計測を開始します。'
        }],
        type: 'neutral',
        timestamp: Date.now(),
        change: 0
      });
      
      // ログは最新20件まで保持
      if (this.logs.length > 20) {
        this.logs = this.logs.slice(0, 20);
      }
      
      this.updateLogDisplay();
    }
    
    onResponseStarted() {
      this.responseStartTime = Date.now();
      
      // 回答開始をログに記録
      const timestamp = new Date().toLocaleTimeString();
      const responseTime = this.questionDisplayTime ? 
        ((Date.now() - this.questionDisplayTime) / 1000).toFixed(1) : '不明';
      
      this.logs.unshift({
        text: `[${timestamp}] 回答開始 (${responseTime}s後)`,
        detail: `問題表示から${responseTime}秒後に回答を開始しました。`,
        reasons: [{
          text: '回答開始',
          change: 0,
          type: 'neutral',
          category: 'イベント',
          detail: `問題表示から${responseTime}秒後に回答を開始しました。`
        }],
        type: 'neutral',
        timestamp: Date.now(),
        change: 0
      });
      
      // ログは最新20件まで保持
      if (this.logs.length > 20) {
        this.logs = this.logs.slice(0, 20);
      }
      
      this.updateLogDisplay();
    }
    
    onNoteInput() {
      this.noteInputs++;
      
      // メモ入力を即座にログに記録
      const timestamp = new Date().toLocaleTimeString();
      const bonus = 2; // メモ1回につき2点
      
      this.logs.unshift({
        text: `[${timestamp}] メモ入力 (+${bonus})`,
        detail: `メモエリアに入力があり、学習意欲が評価されました（累計: ${this.noteInputs}回）`,
        reasons: [{
          text: 'メモ入力',
          change: bonus,
          type: 'positive',
          category: 'メモ',
          detail: `メモエリアに入力があり、学習意欲が評価されました（累計: ${this.noteInputs}回）`
        }],
        type: 'positive',
        timestamp: Date.now(),
        change: bonus
      });
      
      // ログは最新20件まで保持
      if (this.logs.length > 20) {
        this.logs = this.logs.slice(0, 20);
      }
      
      this.updateLogDisplay();
    }
  }
  
  // 集中度トラッカーを初期化
  const concentrationTracker = new ConcentrationTracker();
  
  // JSONデータの確認
  let rawQuestionData;
  try {
    rawQuestionData = <%= raw @questions.to_json(include: :options) %>;
    console.log('生の質問データを取得しました');
  } catch (e) {
    console.error('質問データの解析中にエラーが発生しました:', e);
    rawQuestionData = [];
  }
  
  // Initialize questions with a 'shown' property to track which ones have been displayed
  const questions = (rawQuestionData || []).map(q => ({...q, shown: false}));
  console.log('質問データ:', questions);
  
  const waitingMessage = document.getElementById('waiting-message');
  const questionDisplay = document.getElementById('question-display');
  const questionText = document.getElementById('question-text');
  const questionIndicator = document.getElementById('question-indicator');
  
  const trueFalseForm = document.getElementById('true-false-form');
  const multipleChoiceForm = document.getElementById('multiple-choice-form');
  const freeResponseForm = document.getElementById('free-response-form');
  const mcOptions = document.getElementById('mc-options');
  
  const tfSubmit = document.getElementById('tf-submit');
  const mcSubmit = document.getElementById('mc-submit');
  const frSubmit = document.getElementById('fr-submit');
  const resultMessage = document.getElementById('result-message');
  
  const noteTextarea = document.getElementById('note-textarea');
  const saveNoteBtn = document.getElementById('save-note-btn');
  const savedNotes = document.getElementById('saved-notes');
  
  // メモ入力時のイベント追加
  let noteInputTimer;
  noteTextarea.addEventListener('input', function() {
    // 連続した入力をまとめるために500ms待つ
    clearTimeout(noteInputTimer);
    noteInputTimer = setTimeout(() => {
      concentrationTracker.onNoteInput();
    }, 500);
  });
  
  let activeQuestion = null;
  let videoCheckInterval;
  let questionIndicatorTimeout;
  let questionStartTime = null; // 質問表示開始時間を記録

  if (videoPlayer) {
    // 動画の読み込み状態をデバッグログで確認
    console.log('初期動画状態:', {
      readyState: videoPlayer.readyState,
      paused: videoPlayer.paused,
      duration: videoPlayer.duration,
      currentSrc: videoPlayer.currentSrc
    });
    
    // 動画の読み込み完了を待つ
    videoPlayer.addEventListener('loadedmetadata', function() {
      console.log('動画メタデータ読み込み完了');
    });
    
    // 動画の再生可能状態を待つ
    videoPlayer.addEventListener('canplay', function() {
      console.log('動画再生可能:', {
        readyState: videoPlayer.readyState,
        duration: videoPlayer.duration
      });
      
      // 動画が再生可能になったら問題チェック開始
      if (!videoCheckInterval) {
        console.log('問題チェックタイマー開始');
        videoCheckInterval = setInterval(checkVideoTime, 1000);
      }
    });
    
    // 安全策として、DOMContentLoadedの後に少し遅延させて問題チェックを開始
    setTimeout(() => {
      if (!videoCheckInterval && videoPlayer.readyState >= 2) {
        console.log('遅延問題チェックタイマー開始');
        videoCheckInterval = setInterval(checkVideoTime, 1000);
      }
    }, 1000);
    
    // Reset questions when video is seeked
    videoPlayer.addEventListener('seeked', function() {
      // Only reset questions if seeking backwards
      const currentTime = videoPlayer.currentTime;
      console.log('シーク位置変更:', currentTime);
      
      for (const question of questions) {
        if (question.shown && question.time_position > currentTime) {
          console.log(`質問リセット: ${question.content}`);
          question.shown = false;
        }
      }
      
      // Hide the indicator until the next check
      questionIndicator.style.display = 'none';
      if (questionIndicatorTimeout) {
        clearTimeout(questionIndicatorTimeout);
      }
    });
    
    // Reset all questions when video is restarted
    videoPlayer.addEventListener('ended', function() {
      for (const question of questions) {
        question.shown = false;
      }
    });
    
    function checkVideoTime() {
      // 動画が読み込まれていない場合は何もしない
      if (videoPlayer.readyState < 2) {
        console.log('動画がまだ十分に読み込まれていません:', videoPlayer.readyState);
        return;
      }
      
      const currentTime = videoPlayer.currentTime;
      
      // 再生中またはチェックする必要がある場合
      if (!videoPlayer.paused || activeQuestion !== null) {
        console.log('現在の再生位置:', currentTime);
        
        // Check for upcoming questions
        const upcomingQuestionWindow = 5; // Show indicator 5 seconds before question
        
        let hasUpcomingQuestion = false;
        for (let i = 0; i < questions.length; i++) {
          const question = questions[i];
          
          // デバッグ用：すべての質問の状態を定期的にチェック
          if (Math.floor(currentTime) % 5 === 0) {
            console.log(`質問${i+1}:`, question.content, '位置:', question.time_position, '表示済み:', question.shown);
          }
          
          // Check if there's a question coming up soon but not yet shown
          if (currentTime < question.time_position && 
              currentTime >= question.time_position - upcomingQuestionWindow && 
              !question.shown) {
            hasUpcomingQuestion = true;
            console.log('間もなく問題:', question.content);
            // Show indicator if not already showing
            if (questionIndicator.style.display !== 'block') {
              questionIndicator.style.display = 'block';
              
              // Clear any existing timeout
              if (questionIndicatorTimeout) {
                clearTimeout(questionIndicatorTimeout);
              }
            }
          }
          
          // If the current time is past or equal to the question time and within a small window (0.5s)
          // and no question is currently active
          if (currentTime >= question.time_position && 
              currentTime <= question.time_position + 0.5 && 
              activeQuestion === null && 
              !question.shown) {
            console.log('問題検出:', question);
            console.log('現在の時間:', currentTime);
            // Mark this question as shown so it doesn't appear again
            question.shown = true;
            // Hide the indicator
            questionIndicator.style.display = 'none';
            if (questionIndicatorTimeout) {
              clearTimeout(questionIndicatorTimeout);
            }
            try {
              showQuestion(question);
              videoPlayer.pause();
            } catch (error) {
              console.error('問題表示中にエラーが発生しました:', error);
            }
            break;
          }
        }
        
        // If no upcoming questions, hide the indicator
        if (!hasUpcomingQuestion && questionIndicator.style.display === 'block') {
          // Set a small delay before hiding to prevent flickering
          questionIndicatorTimeout = setTimeout(() => {
            questionIndicator.style.display = 'none';
          }, 500);
        }
      }
    }
    
    function showQuestion(question) {
      console.log('問題表示:', question);
      
      // 問題表示開始時間を記録
      questionStartTime = Date.now();
      
      // 集中度トラッカーに問題表示を通知
      concentrationTracker.onQuestionDisplayed();
      
      // 問題データの検証
      if (!question || !question.content) {
        console.error('問題データが不正です:', question);
        return;
      }
      
      activeQuestion = question;
      
      try {
        // Hide waiting message, show question
        waitingMessage.style.display = 'none';
        questionDisplay.style.display = 'block';
        
        // Set question text with timestamp
        const timeFormatted = formatTimePosition(question.time_position || 0);
        console.log('フォーマット済み時間:', timeFormatted);
        console.log('問題内容:', question.content);
        
        // 問題文を表示
        questionText.textContent = ''; // 一旦クリア
        
        const timestampDiv = document.createElement('div');
        timestampDiv.className = 'question-timestamp';
        timestampDiv.textContent = timeFormatted;
        questionText.appendChild(timestampDiv);
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'question-content-text';
        contentDiv.textContent = question.content;
        questionText.appendChild(contentDiv);
        
        // Reset previous result message
        resultMessage.style.display = 'none';
        resultMessage.className = 'result-message';
        
        // Show appropriate form based on question type
        trueFalseForm.style.display = 'none';
        multipleChoiceForm.style.display = 'none';
        freeResponseForm.style.display = 'none';
        
        if (question.question_type === 'true_false') {
          trueFalseForm.style.display = 'block';
          // Reset selection
          const radios = trueFalseForm.querySelectorAll('input[type="radio"]');
          radios.forEach(radio => radio.checked = false);
        } 
        else if (question.question_type === 'multiple_choice') {
          multipleChoiceForm.style.display = 'block';
          
          // Clear previous options
          mcOptions.innerHTML = '';
          
          // Add new options
          if (question.options && question.options.length > 0) {
            question.options.forEach((option, index) => {
              if (!option || !option.content) return;
              
              const label = document.createElement('label');
              label.className = 'option-label';
              
              const input = document.createElement('input');
              input.type = 'radio';
              input.name = 'mc-answer';
              input.value = option.id;
              
              label.appendChild(input);
              label.appendChild(document.createTextNode(' ' + option.content));
              mcOptions.appendChild(label);
            });
          } else {
            console.error('選択肢がありません:', question);
          }
        } 
        else if (question.question_type === 'free_response') {
          freeResponseForm.style.display = 'block';
          document.getElementById('free-response-answer').value = '';
        }
      } catch (error) {
        console.error('問題表示中にエラーが発生しました:', error);
      }
    }
    
    // Helper function to format time position
    function formatTimePosition(timeInSeconds) {
      const minutes = Math.floor(timeInSeconds / 60);
      const seconds = Math.floor(timeInSeconds % 60);
      return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    // Handle true/false submission
    tfSubmit.addEventListener('click', function() {
      const selectedAnswer = document.querySelector('input[name="tf-answer"]:checked');
      
      if (selectedAnswer && activeQuestion) {
        // 集中度トラッカーに回答開始を通知
        concentrationTracker.onResponseStarted();
        submitAnswer(selectedAnswer.value, null);
      } else {
        alert('回答を選択してください');
      }
    });
    
    // Handle multiple choice submission
    mcSubmit.addEventListener('click', function() {
      const selectedOption = document.querySelector('input[name="mc-answer"]:checked');
      
      if (selectedOption && activeQuestion) {
        // 集中度トラッカーに回答開始を通知
        concentrationTracker.onResponseStarted();
        const optionId = selectedOption.value;
        submitAnswer(null, optionId);
      } else {
        alert('回答を選択してください');
      }
    });
    
    // Handle free response submission
    frSubmit.addEventListener('click', function() {
      const answer = document.getElementById('free-response-answer').value.trim();
      
      // 記述問題では空欄も有効な回答として受け付ける
      if (activeQuestion) {
        // 集中度トラッカーに回答開始を通知
        concentrationTracker.onResponseStarted();
        // 空欄でも送信可能に変更
        submitAnswer(answer, null);
      } else {
        alert('問題が表示されていません');
      }
    });
    
    function submitAnswer(userAnswer, optionId) {
      // 回答時間を計算（ミリ秒）
      const responseTime = questionStartTime ? Date.now() - questionStartTime : 0;
      
      const formData = new FormData();
      
      if (userAnswer) {
        formData.append('user_response[user_answer]', userAnswer);
      }
      
      if (optionId) {
        formData.append('option_id', optionId);
      }
      
      // 回答時間を追加
      formData.append('user_response[response_time]', responseTime.toString());
      
      // CSRFトークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]');
      const headers = {
        'Accept': 'application/json'
      };
      if (csrfToken) {
        headers['X-CSRF-Token'] = csrfToken.content;
      }
      
      // Store the current question for reference after the request
      const currentQuestion = activeQuestion;
      
      // 送信前にデバッグ情報
      console.log('送信データ:', {
        url: `/videos/<%= @video.id %>/questions/${currentQuestion.id}/user_responses`,
        userAnswer: userAnswer,
        optionId: optionId
      });
      
      // Send response to the server
      fetch(`/videos/<%= @video.id %>/questions/${currentQuestion.id}/user_responses`, {
        method: 'POST',
        body: formData,
        headers: headers
      })
      .then(response => {
        console.log('レスポンスステータス:', response.status);
        console.log('レスポンスヘッダー:', {
          contentType: response.headers.get('Content-Type'),
          accept: response.headers.get('Accept')
        });
        
        if (!response.ok) {
          // エラーレスポンスの場合、JSONで詳細を取得
          const contentType = response.headers.get('Content-Type');
          if (contentType && contentType.includes('application/json')) {
            return response.json().then(errorData => {
              console.error('サーバーエラー詳細:', errorData);
              const error = new Error(`Server error: ${response.status}`);
              error.response = response;
              error.data = errorData;
              throw error;
            });
          } else {
            return response.text().then(text => {
              console.error('エラーレスポンス:', text);
              const error = new Error(`Network response was not ok: ${response.status}`);
              error.response = response;
              throw error;
            });
          }
        }
        
        // Check if the response is JSON
        const contentType = response.headers.get('Content-Type');
        if (!contentType || !contentType.includes('application/json')) {
          return response.text().then(text => {
            console.error('予期せぬレスポース形式:', contentType, text);
            throw new Error('Expected JSON response but got ' + contentType);
          });
        }
        
        return response.json();
      })
      .then(data => {
        console.log('サーバーレスポンス:', data);
        
        // Display result
        resultMessage.style.display = 'block';
        
        let resultText = '';
        
        if (data.correct) {
          resultMessage.className = 'result-message correct';
          resultText = '正解です！';
          
          // 解答表示設定が有効な場合、正解も表示
          if (data.show_answer && data.correct_answer) {
            resultText += ` 正解: ${data.correct_answer}`;
          }
        } else {
          resultMessage.className = 'result-message incorrect';
          resultText = '不正解です。';
          
          // 解答表示設定が有効な場合のみ正解を表示
          if (data.show_answer && data.correct_answer) {
            resultText += ` 正解: ${data.correct_answer}`;
          }
        }
        
        // 回答時間を表示
        if (data.response_time) {
          resultText += ` (回答時間: ${data.response_time.toFixed(1)}秒)`;
        }
        
        resultMessage.textContent = resultText;
        
        // Reset active question after 3 seconds and resume video
        setTimeout(() => {
          activeQuestion = null;
          waitingMessage.style.display = 'block';
          questionDisplay.style.display = 'none';
          videoPlayer.play();
        }, 3000);
      })
      .catch(error => {
        console.error('Error:', error);
        
        let errorMessage = '回答の送信中にエラーが発生しました。';
        
        // サーバーからのエラーデータがある場合
        if (error.data) {
          console.error('Server error details:', error.data);
          
          if (error.data.errors && error.data.errors.length > 0) {
            errorMessage += '\n詳細: ' + error.data.errors.join(', ');
          }
          
          if (error.data.debug_info) {
            console.log('Debug info:', error.data.debug_info);
          }
        } else if (error.message) {
          errorMessage += '\n詳細: ' + error.message;
        }
        
        alert(errorMessage);
        
        // In case of error, still reset the question and continue playing
        setTimeout(() => {
          activeQuestion = null;
          waitingMessage.style.display = 'block';
          questionDisplay.style.display = 'none';
          videoPlayer.play();
        }, 1000);
      });
    }
    
    // Note system
    saveNoteBtn.addEventListener('click', function() {
      const noteContent = noteTextarea.value.trim();
      
      if (noteContent) {
        // 集中度トラッカーにメモ入力を通知
        concentrationTracker.onNoteInput();
        
        const formData = new FormData();
        formData.append('note[content]', noteContent);
        formData.append('note[time_position]', Math.floor(videoPlayer.currentTime));
        
        // Send note to the server
        fetch(`/videos/<%= @video.id %>/notes`, {
          method: 'POST',
          body: formData,
          headers: {
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          }
        })
        .then(response => response.json())
        .then(data => {
          // Add the new note to the list
          const notesList = document.querySelector('.notes-list') || document.createElement('ul');
          
          if (!notesList.classList.contains('notes-list')) {
            notesList.className = 'notes-list';
            
            const heading = document.createElement('h4');
            heading.textContent = '保存したメモ';
            
            savedNotes.innerHTML = '';
            savedNotes.appendChild(heading);
            savedNotes.appendChild(notesList);
          }
          
          const noteItem = document.createElement('li');
          noteItem.className = 'note-item';
          
          const noteTime = document.createElement('div');
          noteTime.className = 'note-time';
          
          const minutes = Math.floor(data.time_position / 60);
          const seconds = Math.floor(data.time_position % 60);
          noteTime.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
          
          const noteText = document.createElement('div');
          noteText.className = 'note-text';
          noteText.textContent = data.content;
          
          noteItem.appendChild(noteTime);
          noteItem.appendChild(noteText);
          notesList.appendChild(noteItem);
          
          // Clear the textarea
          noteTextarea.value = '';
        })
        .catch(error => {
          console.error('Error:', error);
          alert('メモの保存中にエラーが発生しました。');
        });
      } else {
        alert('メモを入力してください');
      }
    });
    
    // Clean up interval when leaving the page
    window.addEventListener('beforeunload', function() {
      clearInterval(videoCheckInterval);
    });
  }
});
</script>
