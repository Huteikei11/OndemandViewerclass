<div class="container">
  <div class="header">
    <h1><%= @video.title %>の編集</h1>
    <div class="header-actions">
      <%= link_to '詳細', @video, class: "btn btn-info" %>
      <%= link_to '戻る', videos_path, class: "btn btn-secondary" %>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h3>ビデオ情報</h3>
        </div>
        <div class="card-body">
          <%= form_with(model: @video, local: true, html: { multipart: true, class: "video-form" }) do |form| %>
            <% if @video.errors.any? %>
              <div class="error-messages">
                <h2><%= pluralize(@video.errors.count, "error") %> prohibited this video from being saved:</h2>
                <ul>
                  <% @video.errors.full_messages.each do |message| %>
                    <li><%= message %></li>
                  <% end %>
                </ul>
              </div>
            <% end %>

            <div class="form-group">
              <%= form.label :title, "タイトル" %>
              <%= form.text_field :title, class: "form-control" %>
            </div>

            <div class="form-group">
              <%= form.label :description, "説明" %>
              <%= form.text_area :description, rows: 5, class: "form-control" %>
            </div>

            <div class="form-group">
              <%= form.label :video_file, "講義ビデオ" %>
              <% if @video.video_file.attached? %>
                <p>現在のビデオ: <%= @video.video_file.filename %></p>
              <% end %>
              <%= form.file_field :video_file, accept: 'video/*', class: "form-control-file" %>
              <small class="form-text text-muted">サポートされる形式: MP4, WebM, Ogg</small>
            </div>

            <div class="form-group">
              <%= form.label :pdf_file, "PDF資料 (任意)" %>
              <% if @video.pdf_file.attached? %>
                <p>現在のPDF: <%= @video.pdf_file.filename %></p>
              <% end %>
              <%= form.file_field :pdf_file, accept: '.pdf', class: "form-control-file" %>
            </div>

            <div class="form-actions">
              <%= form.submit "保存", class: "btn btn-primary" %>
            </div>
          <% end %>
        </div>
      </div>
    </div>
    
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h3>問題管理</h3>
        </div>
        <div class="card-body">
          <% if @video.video_file.attached? %>
            <div class="video-preview">
              <video id="video-player" controls>
                <source src="<%= url_for(@video.video_file) %>" type="<%= @video.video_file.content_type %>">
                Your browser does not support the video tag.
              </video>
              <div id="current-time">00:00</div>
            </div>
            
            <div class="question-form">
              <h4>新しい問題を追加</h4>
              <%= form_with(model: [@video, Question.new], local: true, id: "new-question-form", onsubmit: "prepareFormSubmission()") do |form| %>
                <div class="form-group">
                  <%= form.label :content, "問題文" %>
                  <%= form.text_area :content, rows: 3, class: "form-control" %>
                </div>
                
                <div class="form-group">
                  <%= form.label :question_type, "問題タイプ" %>
                  <%= form.select :question_type, 
                      options_for_select([
                        ["○×問題", "true_false"], 
                        ["選択問題", "multiple_choice"], 
                        ["記述問題", "free_response"]
                      ]), 
                      {}, 
                      { class: "form-control", id: "question-type-select" } %>
                </div>
                
                <div id="true-false-options" class="question-type-options">
                  <div class="form-group">
                    <%= form.label :answer, "正解" %>
                    <%= form.select :answer, 
                        options_for_select([["○", "○"], ["×", "×"]]), 
                        {}, 
                        { class: "form-control" } %>
                  </div>
                </div>
                
                <div id="multiple-choice-options" class="question-type-options" style="display:none;">
                  <div class="form-group">
                    <label>選択肢</label>
                    <div id="options-container">
                      <div class="option-item">
                        <input type="text" name="options[][content]" class="form-control option-content" placeholder="選択肢1">
                        <div class="option-correct">
                          <input type="radio" name="option_correct" value="0" checked> 正解
                          <input type="hidden" name="options[][is_correct]" value="true" class="is-correct-field">
                        </div>
                      </div>
                    </div>
                    <button type="button" id="add-option-btn" class="btn btn-sm btn-outline-secondary mt-2">選択肢を追加</button>
                  </div>
                </div>
                
                <div id="free-response-options" class="question-type-options" style="display:none;">
                  <div class="form-group">
                    <%= form.label :answer, "正解 (キーワード)" %>
                    <%= form.text_field :answer, class: "form-control" %>
                  </div>
                </div>
                
                <div class="form-group">
                  <%= form.label :time_position, "表示時間 (秒)" %>
                  <%= form.number_field :time_position, class: "form-control", id: "time-position" %>
                  <button type="button" id="current-time-btn" class="btn btn-sm btn-outline-secondary mt-2">現在の時間を設定</button>
                </div>
                
                <div class="form-group">
                  <%= form.label :show_answer, "解答表示" %>
                  <div>
                    <%= form.check_box :show_answer, checked: true %>
                    <label for="question_show_answer" class="checkbox-label">回答後に正解を表示する</label>
                  </div>
                </div>
                
                <div class="form-actions">
                  <%= form.submit "問題を追加", class: "btn btn-success" %>
                </div>
              <% end %>
            </div>
            
            <div class="questions-list mt-4">
              <h4>設定済みの問題 (<%= @questions&.count || 0 %>)</h4>
              <% if @questions&.any? %>
                <ul class="list-group">
                  <% @questions.each do |question| %>
                    <li class="list-group-item">
                      <div class="question-item">
                        <div class="question-header">
                          <span class="time-badge"><%= format_time_position(question.time_position) %></span>
                          <span class="badge <%= question_type_badge_class(question.question_type) %>">
                            <%= question_type_display(question.question_type) %>
                          </span>
                          <div class="question-actions">
                            <button class="btn btn-sm btn-outline-primary edit-question-btn" data-question-id="<%= question.id %>">編集</button>
                            <%= button_to '削除', 
                                video_question_path(@video, question), 
                                method: :delete, 
                                form: { data: { turbo_confirm: '本当に削除しますか？' } },
                                class: "btn btn-sm btn-outline-danger" %>
                          </div>
                        </div>
                        <div class="question-content">
                          <%= question.content %>
                        </div>
                        <% if question.question_type == 'true_false' || question.question_type == 'free_response' %>
                          <div class="answer mt-2">
                            <strong>正解:</strong> <%= question.answer %>
                          </div>
                        <% elsif question.question_type == 'multiple_choice' && question.options.any? %>
                          <div class="options mt-2">
                            <strong>選択肢:</strong>
                            <ul class="options-list">
                              <% question.options.each do |option| %>
                                <li class="<%= 'correct' if option.is_correct %>">
                                  <%= option.content %> <%= '(正解)' if option.is_correct %>
                                </li>
                              <% end %>
                            </ul>
                          </div>
                        <% end %>
                      </div>
                    </li>
                  <% end %>
                </ul>
              <% else %>
                <p class="text-muted">まだ問題が設定されていません。</p>
              <% end %>
            </div>
          <% else %>
            <div class="alert alert-warning">
              問題を追加するには、まずビデオをアップロードしてください。
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 問題編集用モーダル(簡略版) -->
<div id="direct-edit-question-modal" class="modal-overlay">
  <div class="modal-content">
    <div class="modal-header">
      <h4>問題を編集</h4>
      <span class="modal-close">&times;</span>
    </div>
    
    <div class="modal-body">
      <!-- 簡易版の編集フォーム -->
      <div class="direct-edit-container">
        <form id="direct-edit-form" method="POST">
          <input type="hidden" name="_method" value="PATCH">
          <input type="hidden" name="authenticity_token" value="" id="edit-auth-token">
          <input type="hidden" name="question_id" id="edit-question-id">
          
          <div class="form-group">
            <label for="question_content">問題文</label>
            <textarea name="question[content]" id="question_content" rows="3" class="form-control"></textarea>
          </div>
          
          <div class="form-group">
            <label for="question_time_position">表示時間 (秒)</label>
            <input type="number" name="question[time_position]" id="question_time_position" class="form-control">
          </div>
          
          <div class="form-group">
            <label for="question_show_answer">解答表示</label>
            <div>
              <input type="checkbox" name="question[show_answer]" id="question_show_answer">
              <label for="question_show_answer" class="checkbox-label">回答後に正解を表示する</label>
            </div>
          </div>
          
          <!-- 問題タイプによって表示を変える部分 -->
          <div id="edit-question-type-container">
            <!-- 〇×問題 -->
            <div id="edit-true-false-options" class="question-type-options">
              <div class="form-group">
                <label>正解</label>
                <div class="true-false-buttons">
                  <label>
                    <input type="radio" name="question[answer]" value="○"> ○
                  </label>
                  <label>
                    <input type="radio" name="question[answer]" value="×"> ×
                  </label>
                </div>
              </div>
            </div>
            
            <!-- 自由記述問題 -->
            <div id="edit-free-response-options" class="question-type-options">
              <div class="form-group">
                <label for="question_answer">正解 (空欄可)</label>
                <input type="text" name="question[answer]" id="question_answer" class="form-control">
              </div>
            </div>
          </div>
          
          <div class="form-actions mt-3 text-center">
            <button type="submit" class="btn btn-primary">更新</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }
  
  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
  }
  
  .card {
    margin-bottom: 20px;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border: 1px solid rgba(0, 0, 0, 0.125);
    border-radius: 0.25rem;
  }
  
  .card-header {
    padding: 0.75rem 1.25rem;
    background-color: rgba(0, 0, 0, 0.03);
    border-bottom: 1px solid rgba(0, 0, 0, 0.125);
  }
  
  .card-header h3 {
    margin: 0;
  }
  
  .card-body {
    padding: 1.25rem;
  }
  
  .video-preview {
    margin-bottom: 20px;
  }
  
  .video-preview video {
    width: 100%;
    border-radius: 5px;
  }
  
  #current-time {
    background-color: #000;
    color: #fff;
    padding: 5px 10px;
    display: inline-block;
    margin-top: 10px;
    font-family: monospace;
    border-radius: 3px;
  }
  
  .question-form {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 20px;
  }
  
  .option-item {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
  }
  
  .option-content {
    flex: 1;
    margin-right: 10px;
  }
  
  .option-correct {
    white-space: nowrap;
  }
  
  .questions-list {
    margin-top: 20px;
  }
  
  .list-group {
    padding-left: 0;
    margin-bottom: 0;
  }
  
  .list-group-item {
    position: relative;
    display: block;
    padding: 0.75rem 1.25rem;
    margin-bottom: -1px;
    background-color: #fff;
    border: 1px solid rgba(0, 0, 0, 0.125);
  }
  
  .list-group-item:first-child {
    border-top-left-radius: 0.25rem;
    border-top-right-radius: 0.25rem;
  }
  
  .list-group-item:last-child {
    margin-bottom: 0;
    border-bottom-left-radius: 0.25rem;
    border-bottom-right-radius: 0.25rem;
  }
  
  .question-header {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
  }
  
  .time-badge {
    background-color: #007bff;
    color: #fff;
    padding: 3px 8px;
    border-radius: 3px;
    margin-right: 10px;
    font-family: monospace;
  }
  
  .question-actions {
    margin-left: auto;
  }
  
  .options-list {
    padding-left: 20px;
  }
  
  .options-list .correct {
    color: #28a745;
    font-weight: bold;
  }
  
  .badge {
    display: inline-block;
    padding: 0.25em 0.4em;
    font-size: 75%;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    border-radius: 0.25rem;
    color: #fff;
  }
  
  .badge-primary {
    background-color: #007bff;
  }
  
  .badge-success {
    background-color: #28a745;
  }
  
  .badge-info {
    background-color: #17a2b8;
  }
  
  .badge-secondary {
    background-color: #6c757d;
  }
  
  .row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -15px;
    margin-left: -15px;
  }
  
  .col-md-6 {
    flex: 0 0 50%;
    max-width: 50%;
    padding-right: 15px;
    padding-left: 15px;
  }
  
  .form-group {
    margin-bottom: 1rem;
  }
  
  .form-group label {
    display: inline-block;
    margin-bottom: 0.5rem;
  }
  
  .form-control {
    display: block;
    width: 100%;
    height: calc(1.5em + 0.75rem + 2px);
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: #495057;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  }
  
  .form-control-file {
    display: block;
    width: 100%;
  }
  
  .btn {
    display: inline-block;
    font-weight: 400;
    color: #212529;
    text-align: center;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
    background-color: transparent;
    border: 1px solid transparent;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: 0.25rem;
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  }
  
  .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
  }
  
  .btn-primary {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
  }
  
  .btn-outline-primary {
    color: #007bff;
    border-color: #007bff;
  }
  
  .btn-success {
    color: #fff;
    background-color: #28a745;
    border-color: #28a745;
  }
  
  .btn-outline-success {
    color: #28a745;
    border-color: #28a745;
  }
  
  .btn-danger {
    color: #fff;
    background-color: #dc3545;
    border-color: #dc3545;
  }
  
  .btn-outline-danger {
    color: #dc3545;
    border-color: #dc3545;
  }
  
  .btn-info {
    color: #fff;
    background-color: #17a2b8;
    border-color: #17a2b8;
  }
  
  .btn-outline-info {
    color: #17a2b8;
    border-color: #17a2b8;
  }
  
  .btn-secondary {
    color: #fff;
    background-color: #6c757d;
    border-color: #6c757d;
  }
  
  .btn-outline-secondary {
    color: #6c757d;
    border-color: #6c757d;
  }
  
  .mt-2 {
    margin-top: 0.5rem;
  }
  
  .mt-4 {
    margin-top: 1.5rem;
  }
  
  .true-false-buttons {
    display: flex;
    gap: 20px;
  }
  
  .true-false-buttons label {
    display: flex;
    align-items: center;
    gap: 5px;
    cursor: pointer;
  }
  
  .question-type-options {
    margin-top: 1rem;
    padding: 1rem;
    background-color: #f9f9f9;
    border-radius: 4px;
  }
  
  .alert {
    position: relative;
    padding: 0.75rem 1.25rem;
    margin-bottom: 1rem;
    border: 1px solid transparent;
    border-radius: 0.25rem;
  }
  
  .alert-warning {
    color: #856404;
    background-color: #fff3cd;
    border-color: #ffeeba;
  }
  
  .text-muted {
    color: #6c757d;
  }
  
  .modal-overlay {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
  }
  
  .modal-content {
    position: relative;
    background-color: #fefefe;
    margin: 5% auto;
    padding: 0;
    width: 80%;
    max-width: 700px;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    animation: modalFadeIn 0.3s;
  }
  
  @keyframes modalFadeIn {
    from { opacity: 0; transform: translateY(-30px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .modal-header {
    padding: 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .modal-header h4 {
    margin: 0;
    font-size: 18px;
  }
  
  .modal-close {
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
  }
  
  .modal-close:hover {
    color: #333;
  }
  
  .modal-body {
    padding: 20px;
  }
  
  .spinner-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 200px;
  }
  
  .spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 2s linear infinite;
    margin-bottom: 15px;
  }
  
  .loading-text {
    color: #666;
    font-size: 14px;
    text-align: center;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  /* 削除ボタン用のスタイル調整 */
  .question-actions .btn-outline-danger {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    background-color: transparent;
    border: 1px solid #dc3545;
    border-radius: 0.2rem;
    color: #dc3545;
    font-weight: 400;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    margin-left: 5px;
  }
  
  .question-actions form {
    display: inline;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Video player time tracking
  const videoPlayer = document.getElementById('video-player');
  const currentTimeDisplay = document.getElementById('current-time');
  const timePositionInput = document.getElementById('time-position');
  const currentTimeBtn = document.getElementById('current-time-btn');
  
  if (videoPlayer) {
    // 動画の読み込み完了を待つ
    videoPlayer.addEventListener('loadedmetadata', function() {
      console.log('動画メタデータ読み込み完了');
    });
    
    // 動画の再生可能状態を待つ
    videoPlayer.addEventListener('canplay', function() {
      console.log('動画再生可能');
    });
    
    videoPlayer.addEventListener('timeupdate', function() {
      const minutes = Math.floor(videoPlayer.currentTime / 60);
      const seconds = Math.floor(videoPlayer.currentTime % 60);
      currentTimeDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    });
    
    // 現在時間ボタンのイベントリスナー
    if (currentTimeBtn) {
      currentTimeBtn.addEventListener('click', function() {
        if (videoPlayer.readyState >= 2) { // HAVE_CURRENT_DATA以上
          timePositionInput.value = Math.floor(videoPlayer.currentTime);
        } else {
          alert('動画がまだ読み込まれていません。少し待ってから再試行してください。');
        }
      });
    }
    
    // Make sure the video is loaded before we try to play it
    videoPlayer.addEventListener('error', function(e) {
      console.error('Video error:', e);
      alert('動画の読み込み中にエラーが発生しました。ページをリロードしてください。');
    });
  }
  
  // Question type selection
  const questionTypeSelect = document.getElementById('question-type-select');
  const trueFalseOptions = document.getElementById('true-false-options');
  const multipleChoiceOptions = document.getElementById('multiple-choice-options');
  const freeResponseOptions = document.getElementById('free-response-options');
  
  // Function to set default answer based on question type
  function handleQuestionTypeChange(selectedType) {
    // Hide all option containers
    trueFalseOptions.style.display = 'none';
    multipleChoiceOptions.style.display = 'none';
    freeResponseOptions.style.display = 'none';
    
    // Show the selected one
    if (selectedType === 'true_false') {
      trueFalseOptions.style.display = 'block';
    } else if (selectedType === 'multiple_choice') {
      multipleChoiceOptions.style.display = 'block';
    } else if (selectedType === 'free_response') {
      freeResponseOptions.style.display = 'block';
    }
  }
  
  if (questionTypeSelect) {
    // Set initial state
    handleQuestionTypeChange(questionTypeSelect.value);
    
    // Add change event listener
    questionTypeSelect.addEventListener('change', function() {
      handleQuestionTypeChange(this.value);
    });
  }
  
  // Add option button for multiple choice questions
  const addOptionBtn = document.getElementById('add-option-btn');
  const optionsContainer = document.getElementById('options-container');
  
  if (addOptionBtn && optionsContainer) {
    let optionCount = 1;
    
    addOptionBtn.addEventListener('click', function() {
      optionCount++;
      
      const optionItem = document.createElement('div');
      optionItem.className = 'option-item';
      
      const radioName = `option_${Date.now()}`;
      
      optionItem.innerHTML = `
        <input type="text" name="options[][content]" class="form-control option-content" placeholder="選択肢${optionCount}">
        <div class="option-correct">
          <input type="radio" name="option_correct" value="${optionCount-1}"> 正解
          <input type="hidden" name="options[][is_correct]" value="false" class="is-correct-field">
        </div>
      `;
      
      optionsContainer.appendChild(optionItem);
      
      // Add event listener to the new radio button
      const newRadio = optionItem.querySelector('input[type="radio"]');
      newRadio.addEventListener('change', updateCorrectAnswers);
    });
    
    // Update hidden is_correct fields based on selected radio button
    function updateCorrectAnswers() {
      const radioButtons = document.querySelectorAll('input[name="option_correct"]');
      const isCorrectFields = document.querySelectorAll('.is-correct-field');
      
      for (let i = 0; i < isCorrectFields.length; i++) {
        isCorrectFields[i].value = (radioButtons[i].checked) ? "true" : "false";
      }
    }
    
    // Add event listeners to existing radio buttons
    const existingRadios = document.querySelectorAll('input[name="option_correct"]');
    existingRadios.forEach(radio => {
      radio.addEventListener('change', updateCorrectAnswers);
    });
  }
  
  // Prepare form before submission
  function prepareFormSubmission() {
    const selectedType = document.getElementById('question-type-select').value;
    const answerField = document.querySelector('input[name="question[answer]"]') || 
                        document.querySelector('select[name="question[answer]"]');
    
    if (selectedType === 'multiple_choice') {
      // For multiple choice questions, get the selected option's content
      const selectedRadio = document.querySelector('input[name="option_correct"]:checked');
      if (selectedRadio) {
        const optionIndex = parseInt(selectedRadio.value);
        const optionContents = document.querySelectorAll('.option-content');
        if (optionContents[optionIndex]) {
          // Create a hidden field for answer if it doesn't exist
          if (!answerField) {
            const hiddenAnswer = document.createElement('input');
            hiddenAnswer.type = 'hidden';
            hiddenAnswer.name = 'question[answer]';
            hiddenAnswer.value = 'multiple_choice';
            document.getElementById('new-question-form').appendChild(hiddenAnswer);
          }
        }
      }
    } else if (selectedType === 'true_false') {
      // 〇×問題の場合、回答が確実に送信されるようにする
      const tfSelect = document.querySelector('#true-false-options select[name="question[answer]"]');
      
      // 選択フィールドが非表示になっている場合は、新しい隠しフィールドを作成
      if (!tfSelect || tfSelect.offsetParent === null) {
        // 既存の隠しフィールドを探す
        let hiddenAnswer = document.querySelector('input[type="hidden"][name="question[answer]"]');
        
        // なければ作成
        if (!hiddenAnswer) {
          hiddenAnswer = document.createElement('input');
          hiddenAnswer.type = 'hidden';
          hiddenAnswer.name = 'question[answer]';
          hiddenAnswer.value = '○'; // デフォルト値
          document.getElementById('new-question-form').appendChild(hiddenAnswer);
        }
      }
    }
    
    // Always return true to submit the form
    return true;
  }
  
  // 注意: 以下のコードは古いモーダル用ですが、互換性のために残しておきます
  // 実際には直接編集モーダルが使用されます（下部のスクリプトブロック参照）
  const editQuestionButtons = document.querySelectorAll('.edit-question-btn');
  console.log('編集ボタン数:', editQuestionButtons.length);
  
  // モーダルの取得
  const directEditModal = document.getElementById('direct-edit-question-modal');
  const modalClose = document.querySelector('#direct-edit-question-modal .modal-close');
  const editForm = document.getElementById('direct-edit-form');
  const editQuestionId = document.getElementById('edit-question-id');
  const editAuthToken = document.getElementById('edit-auth-token');
  
  // 問題タイプのコンテナ取得
  const editTrueFalseOptions = document.getElementById('edit-true-false-options');
  const editFreeResponseOptions = document.getElementById('edit-free-response-options');
  
  // 問題タイプに応じた表示切替
  function showEditQuestionTypeOptions(questionType, answer) {
    // すべての問題タイプオプションを非表示
    editTrueFalseOptions.style.display = 'none';
    editFreeResponseOptions.style.display = 'none';
    
    // 問題タイプに応じた表示切替
    if (questionType === 'true_false') {
      editTrueFalseOptions.style.display = 'block';
      // ラジオボタンの選択状態を設定
      const radioButtons = editTrueFalseOptions.querySelectorAll('input[type="radio"]');
      radioButtons.forEach(radio => {
        if (radio.value === answer) {
          radio.checked = true;
        }
      });
    } else if (questionType === 'free_response') {
      editFreeResponseOptions.style.display = 'block';
      // テキストフィールドに値を設定
      document.getElementById('question_answer').value = answer;
    }
    // multiple_choice は編集ダイアログでは未対応
  }
  
  // 編集ボタンのクリックイベントを追加
  editQuestionButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const questionId = this.dataset.questionId;
      
      // フォームの設定
      editQuestionId.value = questionId;
      editAuthToken.value = document.querySelector('meta[name="csrf-token"]').content;
      editForm.action = `/videos/<%= @video.id %>/questions/${questionId}`;
      
      // 問題データを取得して表示
      fetch(`/videos/<%= @video.id %>/questions/${questionId}/edit`, {
        headers: {
          "Accept": "application/json"
        }
      })
      .then(response => response.json())
      .then(data => {
        // フォームに値を設定
        document.getElementById('question_content').value = data.content;
        document.getElementById('question_time_position').value = data.time_position;
        document.getElementById('question_show_answer').checked = data.show_answer;
        
        // 問題タイプに応じた表示
        showEditQuestionTypeOptions(data.question_type, data.answer);
        
        // モーダルを表示
        directEditModal.style.display = 'block';
      })
      .catch(error => {
        console.error('問題データの取得に失敗しました:', error);
        alert('問題データの取得に失敗しました。再度お試しください。');
      });
    });
  });
  
  // フォーム送信時の処理
  if (editForm) {
    editForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // FormDataの作成
      const formData = new FormData(this);
      
      // フォームの送信
      fetch(this.action, {
        method: 'POST',
        body: formData,
        headers: {
          "X-Requested-With": "XMLHttpRequest"
        }
      })
      .then(response => {
        if (response.ok) {
          // 成功時はページをリロード
          window.location.reload();
        } else {
          return response.json().then(data => {
            throw new Error(data.message || 'エラーが発生しました');
          });
        }
      })
      .catch(error => {
        console.error('問題の更新に失敗しました:', error);
        alert('問題の更新に失敗しました: ' + error.message);
      });
    });
  }
  
  // モーダルを閉じる
  if (modalClose) {
    modalClose.addEventListener('click', function() {
      directEditModal.style.display = 'none';
    });
  }
  
  // モーダルの外側をクリックしても閉じる
  window.addEventListener('click', function(event) {
    if (event.target === directEditModal) {
      directEditModal.style.display = 'none';
    }
  });
  
  // 問題データを取得する関数
  // 注意: 古い問題データ取得関数は使用されないため削除しました
  // 現在は簡易版モーダルダイアログ（direct-edit-question-modal）が使用されます
  
  // 多肢選択問題の選択肢管理
  function initEditMultipleChoiceOptions() {
    const addOptionBtn = document.querySelector('#edit-question-form #add-option-btn');
    const optionsContainer = document.querySelector('#edit-question-form #options-container');
    
    if (!addOptionBtn || !optionsContainer) return;
    
    // 選択肢の追加
    addOptionBtn.addEventListener('click', function() {
      const optionItems = optionsContainer.querySelectorAll('.option-item');
      const optionCount = optionItems.length + 1;
      
      const optionItem = document.createElement('div');
      optionItem.className = 'option-item';
      
      optionItem.innerHTML = `
        <input type="text" name="options[][content]" class="form-control option-content" placeholder="選択肢${optionCount}">
        <div class="option-correct">
          <input type="radio" name="option_correct" value="${optionCount-1}"> 正解
          <input type="hidden" name="options[][is_correct]" value="false" class="is-correct-field">
        </div>
        <button type="button" class="remove-option-btn btn btn-sm btn-outline-danger">削除</button>
      `;
      
      optionsContainer.appendChild(optionItem);
      
      // ラジオボタンのイベントリスナー
      const newRadio = optionItem.querySelector('input[type="radio"]');
      newRadio.addEventListener('change', updateEditCorrectAnswers);
      
      // 削除ボタンのイベントリスナー
      const removeBtn = optionItem.querySelector('.remove-option-btn');
      removeBtn.addEventListener('click', function() {
        optionItem.remove();
        updateEditCorrectAnswers();
      });
    });
    
    // 既存の選択肢の削除ボタン
    const existingRemoveButtons = document.querySelectorAll('#edit-question-form .remove-option-btn');
    existingRemoveButtons.forEach(button => {
      button.addEventListener('click', function() {
        this.closest('.option-item').remove();
        updateEditCorrectAnswers();
      });
    });
    
    // 既存のラジオボタンにイベントリスナーを追加
    const existingRadios = document.querySelectorAll('#edit-question-form input[name="option_correct"]');
    existingRadios.forEach(radio => {
      radio.addEventListener('change', updateEditCorrectAnswers);
    });
    
    // 正解の更新
    function updateEditCorrectAnswers() {
      const radioButtons = document.querySelectorAll('#edit-question-form input[name="option_correct"]');
      const isCorrectFields = document.querySelectorAll('#edit-question-form .is-correct-field');
      
      for (let i = 0; i < radioButtons.length; i++) {
        if (i < isCorrectFields.length) {
          isCorrectFields[i].value = (radioButtons[i].checked) ? "true" : "false";
        }
      }
    }
  }
});
</script>
